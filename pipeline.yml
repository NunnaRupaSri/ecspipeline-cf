AWSTemplateVersion: '2010-09-09'
Description: Creates the CI/CD pipeline for ECS deployment.

Parameters:
  GitHubOwner: { Type: String }
  GitHubRepo: { Type: String }
  CodeStarConnectionArn: { Type: String }
  EcrRepoName: { Type: String, Default: 'static-website' }
  ArtifactBucketName: { Type: String }

Resources:
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: 'static-website-pipeline'
      RoleArn: !ImportValue 'PipelineRoleArn'
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucketName
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId: { Category: Source, Owner: AWS, Provider: CodeStarSourceConnection, Version: '1' }
              Configuration: { ConnectionArn: !Ref CodeStarConnectionArn, FullRepositoryId: !Sub '${GitHubOwner}/${GitHubRepo}', BranchName: 'main' }
              OutputArtifacts: [{ Name: 'SourceArtifact' }]
        - Name: Build
          Actions:
            - Name: BuildAndPush
              ActionTypeId: { Category: Build, Owner: AWS, Provider: CodeBuild, Version: '1' }
              Configuration:
                ProjectName: !Ref BuildProject
                EnvironmentVariables:
                  - Name: 'ECR_REPO_NAME'
                    Value: !Ref EcrRepoName
              InputArtifacts: [{ Name: 'SourceArtifact' }]
              OutputArtifacts: [{ Name: 'BuildArtifact' }]
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId: { Category: Deploy, Owner: AWS, Provider: CodeDeployToECS, Version: '1' }
              Configuration:
                ApplicationName: !Ref CodeDeployApp
                DeploymentGroupName: !Ref CodeDeployDG
                TaskDefinition: !ImportValue 'TaskDefinitionArn' # Not present in ecs-cluster.yml
                ImageDefinitions: 'BuildArtifact::imagedefinitions.json'
              InputArtifacts: [{ Name: 'BuildArtifact' }]

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: 'static-website-build'
      ServiceRole: !ImportValue 'CodeBuildRoleArn'
      Artifacts: { Type: CODEPIPELINE }
      Environment: { Type: LINUX_CONTAINER, ComputeType: BUILD_GENERAL1_SMALL, Image: 'aws/codebuild/standard:7.0', PrivilegedMode: true }
      Source: { Type: CODEPIPELINE }

  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties: { ApplicationName: 'static-website-app', ComputePlatform: ECS }

  CodeDeployDG:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApp
      DeploymentGroupName: 'static-website-dg'
      DeploymentConfigName: 'CodeDeployDefault.ECSAllAtOnce' # Use a custom deployment config for 75%/25%
      ServiceRoleArn: !ImportValue 'PipelineRoleArn'
      EcsServices:
        - ClusterName: !ImportValue 'ECSClusterName'
          ServiceName: !ImportValue 'ECSServiceName'
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !ImportValue 'AlbTargetGroupBlueArn'
              - Name: 'StaticWebsiteTgGreen' # Create in ecs-cluster.yml or use a custom resource
            ProdTrafficRoute: { ListenerArns: [!ImportValue 'ALBListenerArn'], Port: 80 }
            TestTrafficRoute: { ListenerArns: [!ImportValue 'ALBListenerArn'], Port: 8080 } # Test listener needed
